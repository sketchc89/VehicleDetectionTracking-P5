Timer unit: 1e-06 s

Total time: 1.14064 s
File: <ipython-input-66-f5dec2122ce3>
Function: detect_cars at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           def detect_cars(img, classifier, X_scaler, scale=1.0, pix_per_cell=8, cells_per_block=2,
     3                                                           overlap=0.75, orient=9):
     4                                               """
     5                                               Function tries to detect cars using sliding windows and then returns a list
     6                                               of bounding boxes where cars could be.
     7                                               
     8                                               :param img: Image to detect cars within
     9                                               :param classifier: Classifier that determines if a window is a car or not
    10                                               :param X_scaler: Scaler used to remove mean and scaling of features
    11                                               :param scale: Amount to scale image to get multiple size boxes
    12                                               :return bounding_boxes: ndarray of windows where cars detected
    13                                               """
    14                                               
    15                                               # TODO: Implement scale
    16         1         4218   4218.0      0.4      img = convert_color(img, cspace='HSV')
    17         1            3      3.0      0.0      if scale != 1.0:
    18         1         1330   1330.0      0.1          img = cv2.resize(img, (np.int(img.shape[1]*scale), np.int(img.shape[0]*scale)))
    19         1            2      2.0      0.0      window_size=64
    20         1            3      3.0      0.0      blocks_per_window = window_size // (cells_per_block*pix_per_cell)
    21         1            2      2.0      0.0      windows = generate_windows(img, blocks_per_window, cells_per_block, pix_per_cell, 
    22         1         1556   1556.0      0.1                                 overlap)
    23         1            5      5.0      0.0      hog_0 = hog(img[:,:,0], orientations=orient, 
    24         1            1      1.0      0.0                      pixels_per_cell=(pix_per_cell, pix_per_cell), 
    25         1            1      1.0      0.0                      cells_per_block=(cells_per_block, cells_per_block),
    26         1       200712 200712.0     17.6                      feature_vector=False, block_norm='L2-Hys')
    27         1            2      2.0      0.0      hog_1 = hog(img[:,:,1], orientations=orient, 
    28         1            1      1.0      0.0                      pixels_per_cell=(pix_per_cell, pix_per_cell), 
    29         1            1      1.0      0.0                      cells_per_block=(cells_per_block, cells_per_block),
    30         1       214233 214233.0     18.8                      feature_vector=False, block_norm='L2-Hys')
    31         1            3      3.0      0.0      hog_2 = hog(img[:,:,2], orientations=orient, 
    32         1            1      1.0      0.0                  pixels_per_cell=(pix_per_cell, pix_per_cell), 
    33         1            1      1.0      0.0                  cells_per_block=(cells_per_block, cells_per_block),
    34         1       187527 187527.0     16.4                  feature_vector=False, block_norm='L2-Hys')
    35         1          421    421.0      0.0      print(hog_0.shape)
    36         1            2      2.0      0.0      bounding_boxes=[]
    37                                               
    38       481          864      1.8      0.1      for count, window in enumerate(windows):
    39       480       100556    209.5      8.8          print(window)
    40       480         5948     12.4      0.5          pix_window = img[pix_per_cell*window[0]:pix_per_cell*window[1],
    41       480         3147      6.6      0.3                           pix_per_cell*window[2]:pix_per_cell*window[3]]
    42                                           #         if count % 1000 == 1:
    43                                           #             print(window)
    44                                           #             plt.imshow(pix_window)
    45                                           #             plt.show()
    46                                           #             print(hist_feat.shape, spatial_feat.shape, hog_feat.shape)
    47       480       300121    625.3     26.3          hist_feat = color_hist(pix_window)
    48       480        20199     42.1      1.8          spatial_feat = bin_spatial(pix_window)
    49                                           #         hog_feat = get_hog_features(pix_window, 3, pix_per_cell, cells_per_block, orient)
    50       480         3463      7.2      0.3          hog_feat_0 = hog_0[window[0]:window[1], window[2]:window[3]].ravel()
    51       480         2225      4.6      0.2          hog_feat_1 = hog_1[window[0]:window[1], window[2]:window[3]].ravel()
    52       480         1894      3.9      0.2          hog_feat_2 = hog_2[window[0]:window[1], window[2]:window[3]].ravel()
    53       480         7309     15.2      0.6          hog_feat = np.hstack((hog_feat_0, hog_feat_1, hog_feat_2))
    54       480         8132     16.9      0.7          features = np.hstack((hist_feat, spatial_feat, hog_feat)).reshape(1,-1)
    55       480        42370     88.3      3.7          scaled_features = X_scaler.transform(features)
    56       480        34015     70.9      3.0          if classifier.predict(scaled_features.reshape(1,-1)) == 1:
    57        42          259      6.2      0.0              bounding_box = pix_per_cell*window/scale
    58        42           99      2.4      0.0              bounding_boxes.append(bounding_box.astype(np.uint))
    59                                           #     img = cv2.cvtColor(img, cv2.COLOR_HSV2RGB)
    60         1           19     19.0      0.0      return np.asarray(bounding_boxes)
