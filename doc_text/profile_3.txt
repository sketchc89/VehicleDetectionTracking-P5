Timer unit: 1e-06 s

Total time: 0.237248 s
File: <ipython-input-56-7d6497b26b4b>
Function: detect_cars_opencv at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           def detect_cars_opencv(img, classifier, X_scaler, hog_descriptor, scale=1.0,
     3                                                                  overlap=1.0, show=False):
     4                                               """
     5                                               Function tries to detect cars using sliding windows and then returns a list
     6                                               of bounding boxes where cars could be.
     7                                               
     8                                               :param img: Image to detect cars within
     9                                               :param classifier: Classifier that determines if a window is a car or not
    10                                               :param X_scaler: Scaler used to remove mean and scaling of features
    11                                               :param scale: Amount to scale image to get multiple size boxes
    12                                               :return bounding_boxes: ndarray of windows where cars detected
    13                                               """
    14                                               
    15         1            3      3.0      0.0      window_size = 64
    16         1         2158   2158.0      0.9      img = convert_color(img, cspace='YUV')
    17         1            2      2.0      0.0      if scale != 1.0:
    18         1         1301   1301.0      0.5          img = cv2.resize(img, (np.int(img.shape[1]*scale), np.int(img.shape[0]*scale)))
    19         1            2      2.0      0.0      height = img.shape[0]
    20         1            2      2.0      0.0      width = img.shape[1]
    21         1            1      1.0      0.0      bounding_boxes=[]
    22         1            5      5.0      0.0      step = max(1,int(window_size*overlap))
    23         1            1      1.0      0.0      count = 0
    24        11           11      1.0      0.0      for y in range(0, height - window_size - 1, step):
    25       200          229      1.1      0.1          for x in range(0, width - window_size - 1, step):
    26       190          195      1.0      0.1              count += 1
    27       190          479      2.5      0.2              pix_window = img[y:y + window_size, x:x + window_size]
    28       190       122730    645.9     51.7              hist_feat = color_hist(pix_window)
    29       190         8788     46.3      3.7              spatial_feat = bin_spatial(pix_window)
    30       190        62179    327.3     26.2              hog_feat = get_hog_opencv(pix_window, hog_descriptor).squeeze()
    31       190         4282     22.5      1.8              features = np.hstack((hist_feat, spatial_feat, hog_feat)).reshape(1,-1)
    32       190        19002    100.0      8.0              scaled_features = X_scaler.transform(features)
    33       190        14944     78.7      6.3              if classifier.predict(scaled_features.reshape(1,-1)) == 1:
    34                                           #                 plt.imshow(pix_window)
    35                                           #                 plt.show()
    36         2            6      3.0      0.0                  bounding_box = [int(y/scale), int((y + window_size)/scale), 
    37         2            6      3.0      0.0                                  int(x/scale), int((x + window_size)//scale)]
    38         2          140     70.0      0.1                  print(bounding_box)
    39         2            2      1.0      0.0                  bounding_boxes.append(bounding_box)
    40         2            3      1.5      0.0                  cv2.rectangle(img, (x, y), 
    41         2            2      1.0      0.0                                     (x + window_size, y + window_size),
    42         2          221    110.5      0.1                                     (0,0,255), 6)
    43       190          306      1.6      0.1              if count % 50 == 1 and show:
    44                                                           cv2.rectangle(img, (x, y), 
    45                                                                              (x + window_size, y + window_size),
    46                                                                              (255,0,255), 6)
    47                                           #                 plt.imshow(pix_window)
    48                                           #                 plt.show()
    49                                                           print(x, width - window_size - 1, step)
    50                                                           print(hist_feat.shape, spatial_feat.shape, hog_feat.shape)
    51                                           
    52         1          138    138.0      0.1      print(show)
    53         1            1      1.0      0.0      if show:
    54                                                   img = convert_color(img, cspace='YUV')
    55                                                   plt.imshow(img)
    56                                                   plt.show()
    57         1           61     61.0      0.0      print('Searched {} windows'.format(count))
    58         1           27     27.0      0.0      print('Found {} boxes'.format(len(bounding_boxes)))
    59         1           21     21.0      0.0      return np.asarray(bounding_boxes)
