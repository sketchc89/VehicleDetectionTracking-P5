Timer unit: 1e-06 s

Total time: 0.137743 s
File: <ipython-input-562-38fe4ec28465>
Function: detect_cars at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           def detect_cars(img, classifier, X_scaler, hog_descriptor, scale=1.0,
     3                                                                  overlap=1.0, show=False, y_bounds=(0.0, 1.0), 
     4                                                                  x_bounds=(0.0, 1.0)):
     5                                               """
     6                                               Function tries to detect cars using sliding windows and then returns a list
     7                                               of bounding boxes where cars could be.
     8                                               
     9                                               :param img: Image to detect cars within
    10                                               :param classifier: Classifier that determines if a window is a car or not
    11                                               :param X_scaler: Scaler used to remove mean and scaling of features
    12                                               :param scale: Amount to scale image to get multiple size boxes
    13                                               :return bounding_boxes: ndarray of windows where cars detected
    14                                               """
    15         1            2      2.0      0.0      window_size = 64
    16         1            3      3.0      0.0      orig_height = img.shape[0]
    17         1            1      1.0      0.0      orig_width = img.shape[1]
    18         1            1      1.0      0.0      if show:
    19                                                   draw_img = np.copy(img)
    20         1            1      1.0      0.0      if scale != 1.0:
    21         1         2263   2263.0      1.6          img = cv2.resize(img, (np.int(img.shape[1]*scale), np.int(img.shape[0]*scale)))
    22         1            4      4.0      0.0      img = cv2.copyMakeBorder(img, window_size, window_size, window_size, 
    23         1          274    274.0      0.2                                    window_size, cv2.BORDER_REFLECT)
    24         1         1433   1433.0      1.0      img = convert_color(img, cspace='YUV')
    25         1            4      4.0      0.0      height = img.shape[0]
    26         1            1      1.0      0.0      width = img.shape[1]
    27         1            1      1.0      0.0      bounding_boxes=[]
    28         1            7      7.0      0.0      step = max(1,int(window_size*overlap))
    29         1            1      1.0      0.0      count = 0
    30         1            2      2.0      0.0      y_start = int(y_bounds[0]*height)
    31         1            2      2.0      0.0      y_end   = int(y_bounds[1]*height) - window_size - 1
    32         1            2      2.0      0.0      x_start = int(x_bounds[0]*width)
    33         1            2      2.0      0.0      x_end   = int(x_bounds[1]*width)  - window_size - 1
    34        15           21      1.4      0.0      for y in range(y_start , y_end, step):
    35       322          486      1.5      0.4          for x in range(x_start, x_end, step):
    36                                           #             print(y, y+window_size, x, x+window_size)
    37       308          486      1.6      0.4              features = []
    38       308          383      1.2      0.3              count += 1
    39       308          798      2.6      0.6              pix_window = img[y:y + window_size, x:x + window_size]
    40                                           #             hist_feat = color_hist(pix_window, channel=3)
    41                                           #             features.append(hist_feat)
    42                                           #             spatial_feat = bin_spatial(pix_window)
    43                                           #             features.append(spatial_feat)
    44       308        77627    252.0     56.4              hog_feat = get_hog_opencv(pix_window, hog_descriptor).squeeze()
    45       308          505      1.6      0.4              features.append(hog_feat)
    46       308         4209     13.7      3.1              features = np.hstack(features).reshape(1,-1)
    47       308        25710     83.5     18.7              scaled_features = X_scaler.transform(features)
    48       308          409      1.3      0.3              if show and count % 5 == 1:
    49                                                           cv2.rectangle(draw_img, (int((x - window_size)/scale), 
    50                                                                                    int((y - window_size)/scale)), 
    51                                                                                   (int(x/scale), 
    52                                                                                    int(y/scale)), 
    53                                                                                    (255,0, 0), 6)
    54       308        23028     74.8     16.7              if classifier.predict(scaled_features) == 1:
    55         5           25      5.0      0.0                  bounding_box = [max(0, int((y - window_size)/scale)), 
    56         5           13      2.6      0.0                                  min(orig_height, int(y/scale + window_size)), 
    57         5           10      2.0      0.0                                  max(0, int((x - window_size)/scale)), 
    58         5           10      2.0      0.0                                  min(orig_width, int(x/scale + window_size))]
    59         5            7      1.4      0.0                  bounding_boxes.append(bounding_box)
    60         1            1      1.0      0.0      if show:
    61                                                   img = cv2.cvtColor(img, cv2.COLOR_YUV2RGB)
    62                                                   plt.imshow(draw_img)
    63                                                   plt.show()
    64                                                   print('Searched {} windows'.format(count))
    65                                                   print('Found {} boxes'.format(len(bounding_boxes)))
    66         1           11     11.0      0.0      return np.asarray(bounding_boxes)
