Timer unit: 1e-06 s

Total time: 0.105418 s
File: <ipython-input-106-4501ef490d61>
Function: detect_cars at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           def detect_cars(img, classifier, X_scaler, hog_descriptor, scale=1.0,
     3                                                                  overlap=1.0, show=False, y_bounds=(0.0, 1.0), 
     4                                                                  x_bounds=(0.0, 1.0)):
     5                                               """
     6                                               Function tries to detect cars using sliding windows and then returns a list
     7                                               of bounding boxes where cars could be.
     8                                               
     9                                               :param img: Image to detect cars within
    10                                               :param classifier: Classifier that determines if a window is a car or not
    11                                               :param X_scaler: Scaler used to remove mean and scaling of features
    12                                               :param scale: Decimal fraction to scale image to get multiple size boxes
    13                                               :param overlap: Decimal fraction of window to slide window over each step
    14                                               :param show: Whether to display information about progress and tests set
    15                                               :param y_bounds: Tuple of decimal fractions of height to search image
    16                                               :param x_bounds: Tuple of decimal fractions of width to search image
    17                                               :return bounding_boxes: ndarray of windows where cars detected
    18                                               """
    19         1            3      3.0      0.0      window_size = 64
    20         1            3      3.0      0.0      orig_height = img.shape[0]
    21         1            2      2.0      0.0      orig_width = img.shape[1]
    22         1            2      2.0      0.0      if show:
    23                                                   draw_img = np.copy(img)
    24         1            2      2.0      0.0      if scale != 1.0:
    25                                                   img = cv2.resize(img, (np.int(img.shape[1]*scale), np.int(img.shape[0]*scale)))
    26         1          535    535.0      0.5      img = cv2.copyMakeBorder(img, 0, 0, 0, window_size, cv2.BORDER_REPLICATE)
    27         1         2042   2042.0      1.9      img = convert_color(img, cspace='YUV')
    28         1            3      3.0      0.0      height = img.shape[0]
    29         1            1      1.0      0.0      width = img.shape[1]
    30         1            1      1.0      0.0      bounding_boxes=[]
    31         1            7      7.0      0.0      step = max(1,int(window_size*overlap))
    32         1            1      1.0      0.0      count = 0
    33         1            2      2.0      0.0      y_start = int(y_bounds[0]*height)
    34         1            2      2.0      0.0      y_end   = int(y_bounds[1]*height) - window_size - 1
    35         1            2      2.0      0.0      x_start = int(x_bounds[0]*width)
    36         1            2      2.0      0.0      x_end   = int(x_bounds[1]*width)  - window_size - 1
    37        12           15      1.2      0.0      for y in range(y_start , y_end, step):
    38       231          340      1.5      0.3          for x in range(x_start, x_end, step):
    39       220          310      1.4      0.3              features = []
    40       220          271      1.2      0.3              count += 1
    41       220          536      2.4      0.5              pix_window = img[y:y + window_size, x:x + window_size]
    42                                           #             hist_feat = color_hist(pix_window, channel=3)
    43                                           #             features.append(hist_feat)
    44       220        10833     49.2     10.3              spatial_feat = bin_spatial(pix_window)
    45       220          303      1.4      0.3              features.append(spatial_feat)
    46       220        52148    237.0     49.5              hog_feat = get_hog_opencv(pix_window, hog_descriptor).squeeze()
    47       220          313      1.4      0.3              features.append(hog_feat)
    48       220         3348     15.2      3.2              features = np.hstack(features).reshape(1,-1)
    49       220        18325     83.3     17.4              scaled_features = X_scaler.transform(features)
    50                                           #             cv2.rectangle(draw_img, (int((x)/scale), 
    51                                           #                                          int((y)/scale)), 
    52                                           #                                         (int((x+window_size)/scale), 
    53                                           #                                          int((y+window_size)/scale)), 
    54                                           #                                          (255,0, 0), 6)
    55       220        15918     72.4     15.1              if classifier.predict(scaled_features) == 1:
    56         9           45      5.0      0.0                  bounding_box = [max(0, int(y/scale)), 
    57         9           25      2.8      0.0                                  min(orig_height, int((y+window_size)/scale)), 
    58         9           18      2.0      0.0                                  max(0, int(x/scale)), 
    59         9           20      2.2      0.0                                  min(orig_width, int((x+window_size)/scale))]
    60         9           15      1.7      0.0                  bounding_boxes.append(bounding_box)
    61         9           12      1.3      0.0                  if show:
    62                                                               cv2.rectangle(draw_img, (int((x)/scale), 
    63                                                                                    int((y)/scale)), 
    64                                                                                   (int((x+window_size)/scale), 
    65                                                                                    int((y+window_size)/scale)), 
    66                                                                                    (255,0, 0), 6)
    67                                                               
    68         1            1      1.0      0.0      if show:
    69                                                   img = cv2.cvtColor(img, cv2.COLOR_YUV2RGB)
    70                                                   plt.imshow(draw_img)
    71                                                   plt.show()
    72                                                   print('Searched {} windows'.format(count))
    73                                                   print('Found {} boxes'.format(len(bounding_boxes)))
    74         1           12     12.0      0.0      return np.asarray(bounding_boxes)
